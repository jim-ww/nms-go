// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notes.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO notes(id, title, content, user_id, created_at, updated_at) VALUES (?, ?, ?, ?, ? ,?) RETURNING id, title, content, user_id, created_at, updated_at
`

type CreateParams struct {
	ID        uuid.UUID
	Title     string
	Content   sql.NullString
	UserID    uuid.UUID `db:"user_id"`
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, create,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserNotesCount = `-- name: GetUserNotesCount :one
SELECT COUNT(id) FROM notes WHERE user_id = ?
`

func (q *Queries) GetUserNotesCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserNotesCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
